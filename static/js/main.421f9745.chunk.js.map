{"version":3,"sources":["App/currencies.js","App/Form/Result/index.js","App/Form/index.js","App/index.js","reportWebVitals.js","index.js"],"names":["currencies","short","name","rate","Result","result","className","undefined","sourceAmount","toFixed","targetAmount","currency","Form","calculateResult","useState","setCurrency","amount","setAmount","onSubmit","event","preventDefault","value","onChange","target","placeholder","type","required","step","map","href","App","setResult","find","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAAaA,G,MAAa,CACxB,CACEC,MAAO,MACPC,KAAM,OACNC,KAAM,QAER,CACEF,MAAO,MACPC,KAAM,iBACNC,KAAM,QAER,CACEF,MAAO,MACPC,KAAM,YACNC,KAAM,QAER,CACEF,MAAO,MACPC,KAAM,kBACNC,KAAM,QAER,CACEF,MAAO,MACPC,KAAM,kBACNC,KAAM,QAER,CACEF,MAAO,MACPC,KAAM,oBACNC,KAAM,U,eC3BGC,EAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACpB,mBAAGC,UAAU,SAAb,cACcC,IAAXF,GACC,qCACGA,EAAOG,aAAaC,QAAQ,GAD/B,eACmD,IACjD,mCACGJ,EAAOK,aAAaD,QAAQ,GAD/B,OACyCJ,EAAOM,kBCH3CC,G,MAAO,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,gBAAiBR,EAAa,EAAbA,OACtC,EAAgCS,mBAASd,EAAW,GAAGC,OAAvD,mBAAOU,EAAP,KAAiBI,EAAjB,KACA,EAA4BD,mBAAS,IAArC,mBAAOE,EAAP,KAAeC,EAAf,KAQA,OACE,uBAAMX,UAAU,OAAOY,SAPR,SAACC,GAEhBA,EAAMC,iBACNP,EAAgBF,EAAUK,IAI1B,UACE,oBAAIV,UAAU,eAAd,sDACA,4BACE,kCACE,sBAAMA,UAAU,kBAAhB,mBACA,uBACEe,MAAOL,EACPM,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBN,EAAUM,EAAOF,QAC3CG,YAAY,gDACZlB,UAAU,cACVmB,KAAK,SACLC,UAAQ,EACRC,KAAK,cAIX,4BACE,kCACE,sBAAMrB,UAAU,kBAAhB,qBACA,wBACEA,UAAU,cACVe,MAAOV,EACPW,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBR,EAAYQ,EAAOF,QAH/C,SAKGrB,EAAW4B,KAAI,SAACjB,GAAD,OACd,wBAA6BU,MAAOV,EAASV,MAA7C,SACGU,EAAST,MADCS,EAASV,iBAO9B,4BACE,wBAAQK,UAAU,eAAlB,wBAGF,oBAAGA,UAAU,aAAb,oCACoB,mBAAGuB,KAAK,iCAAR,uBAAuD,IAD3E,uBAKA,cAAC,EAAD,CAAQxB,OAAQA,SC9BPyB,MAtBf,WACE,MAA4BhB,qBAA5B,mBAAOT,EAAP,KAAe0B,EAAf,KAcA,OACE,qBAAKzB,UAAU,MAAf,SACE,cAAC,EAAD,CAAMD,OAAQA,EAAQQ,gBAdF,SAACF,EAAUK,GAEjC,IAAMb,EAAOH,EAAWgC,MAAK,qBAAG/B,QAAsBU,KAAUR,KAEhE4B,EAAU,CAERvB,cAAeQ,EACfN,aAAcM,EAASb,EACvBQ,mBCJSsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.421f9745.chunk.js","sourcesContent":["export const currencies = [\r\n  {\r\n    short: \"EUR\",\r\n    name: \"EURO\",\r\n    rate: \"4.59\",\r\n  },\r\n  {\r\n    short: \"GBP\",\r\n    name: \"FUNT BRYTYJSKI\",\r\n    rate: \"5.34\",\r\n  },\r\n  {\r\n    short: \"USD\",\r\n    name: \"DOLAR USA\",\r\n    rate: \"3.90\",\r\n  },\r\n  {\r\n    short: \"NOK\",\r\n    name: \"KORONA NORWESKA\",\r\n    rate: \"0.44\",\r\n  },\r\n  {\r\n    short: \"SEK\",\r\n    name: \"KORONA SZWEDZKA\",\r\n    rate: \"0.45\",\r\n  },\r\n  {\r\n    short: \"CHF\",\r\n    name: \"FRANK SZWAJCARSKI\",\r\n    rate: \"4.23\",\r\n  },\r\n];\r\n","import \"./style.css\";\r\n\r\nexport const Result = ({ result }) => (\r\n  <p className=\"result\">\r\n    {result !== undefined && (\r\n      <>\r\n        {result.sourceAmount.toFixed(2)}&nbsp;PLN&nbsp;={\" \"}\r\n        <strong>\r\n          {result.targetAmount.toFixed(2)}&nbsp;{result.currency}\r\n        </strong>\r\n      </>\r\n    )}\r\n  </p>\r\n);\r\n\r\n// komponent w którym przyjmowany jest tylko result\r\n// Jeżeli jest undefined czyli na początku to wtedy nie generuje się nic, a jeżeli result jest podany to wtedy zostanie wygenerowany taki text\r\n//{\" \"} łamie nam spację jeśli się nie mieści przeniesie do nowej linii\r\n// Jest tu użyta specjalna encja żeby się nie złamała spacja\r\n","import React, { useState } from \"react\";\r\nimport { currencies } from \"../currencies\";\r\nimport { Result } from \"./Result\";\r\nimport \"./style.css\";\r\n// Jedyny komponent który używa result\r\nexport const Form = ({ calculateResult, result }) => {\r\n  const [currency, setCurrency] = useState(currencies[0].short); //Currency użytkownik wybiera z listy walut. Też importujemy currencies ponieważ chcemy je wypisac jako options, wybieramy domyśną 1 walutę z listy\r\n  const [amount, setAmount] = useState(\"\"); // Amount użytkownik wpisuje (złotówki) początkowa wartość to jest pusty łańcuch znaków\r\n\r\n  const onSubmit = (event) => {\r\n    // Tylko wywołuje calculateResult przekazując currency i amount, którą dostał w propsach\r\n    event.preventDefault(); // blokowanie wysłania formularza\r\n    calculateResult(currency, amount);\r\n  };\r\n  // Tutaj zapisujemy co po kolei ma znajdować się na stronie\r\n  return (\r\n    <form className=\"form\" onSubmit={onSubmit}>\r\n      <h1 className=\"form__header\">🤑KALKULATOR WALUT🤑</h1>\r\n      <p>\r\n        <label>\r\n          <span className=\"form__labelText\">PLN*:</span>\r\n          <input\r\n            value={amount}\r\n            onChange={({ target }) => setAmount(target.value)} // Przekazujemy klasyczny onChange handler value, chodzi o to żeby było zgodne z tą zmienną stanu amount\r\n            placeholder=\"Wprowadź kwotę w złotówkach\"\r\n            className=\"form__field\"\r\n            type=\"number\"\r\n            required\r\n            step=\"0.01\"\r\n          />\r\n        </label>\r\n      </p>\r\n      <p>\r\n        <label>\r\n          <span className=\"form__labelText\">Waluta:</span>\r\n          <select\r\n            className=\"form__field\"\r\n            value={currency} // Przekazujemy value currency\r\n            onChange={({ target }) => setCurrency(target.value)} // onChange klasycznie,\r\n          >\r\n            {currencies.map((currency) => (\r\n              <option key={currency.short} value={currency.short}>\r\n                {currency.name}\r\n              </option> //generujemy na podstawie tej samej tablicy currencies, każde currecies zamieni się w option, wyświetlane będzie currency.name, generuje te options na podstawie currencies\r\n            ))}\r\n          </select>\r\n        </label>\r\n      </p>\r\n      <p>\r\n        <button className=\"form__button\">Przelicz</button>\r\n      </p>\r\n\r\n      <p className=\"form__info\">\r\n        Kursy pochodzą z: <a href=\"https://mybank.pl/kursy-walut/\">mybank.pl</a>{\" \"}\r\n        z dnia 11.07.2021\r\n      </p>\r\n\r\n      <Result result={result} />\r\n    </form> //Tutaj wyświetlany jest result\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport { Form } from \"./Form\";\r\nimport { currencies } from \"./currencies\";\r\n\r\nfunction App() {\r\n  const [result, setResult] = useState(); //Zadeklarowaliśmy sobie zmienną stanową result (będzie to obiekt ponieważ musimy wypisać ile było wcześniej ile jest teraz i jaka waluta została przeliczona),\r\n\r\n  const calculateResult = (currency, amount) => {\r\n    // funkcja, która szuka (metoda find) wśród tablicy walut (currencies) short taki jaki ma waluta i wyciągamy z niej rate\r\n    const rate = currencies.find(({ short }) => short === currency).rate;\r\n\r\n    setResult({\r\n      //nasz obiekt który ma 3 właściwości, które będą wypisane w wyniku\r\n      sourceAmount: +amount, //Zmiana na liczbę\r\n      targetAmount: amount / rate, // Działanie żeby przeliczyć targetAmount\r\n      currency, //Waluta\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Form result={result} calculateResult={calculateResult} />\r\n    </div>\r\n  ); //W tej aplikacji jest wyłącznie Form do którego przekazujemy result i calculateResult\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}